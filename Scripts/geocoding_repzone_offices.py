# -*- coding: utf-8 -*-
"""geocoding_repzone_offices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Puv39MQVaq2ANTy23mLyv_PCypCmNMC

# Geocoding the 5 Repzone office addresses
********************************************************************************
**Date:** April 21st, 2025

**Author:** N Priyanka
*******************************************************************************
**Description:** Geocoding the 5 Repzone office addresses provided by the client.
*ARCGIS API* is used for geocoding the office addresses.
"""

! pip install geopy --q

import geopy
from geopandas.tools import geocode
import pandas as pd
import numpy as np
import folium

addresses = {"Istanbul": "Koşuyolu Cad. Cenap Şahabettin Sok. No:23 Koşuyolu KADIKÖY / İSTANBUL",
             "Adana":"Yeni Baraj Mah. Ş. Yüzbaşı Bülent Angın Bulvarı Canlı Apt. Sit. No:22/01 Seyhan / ADANA",
             "Ankara": "Mustafa Kemal Mah. 2158 Sok. 2120 Cad. 3/1 Duru Plaza Çankaya / ANKARA",
             "İzmir": "Mansuroğlu Mah. 283/12 Sok. No:16 K:4 D:8 Başarı 14 Apt. Bayraklı / İZMİR",
             "Trakya": "Şeyh Sinan Mah. Hacı Salih Sok. No:1 Hacı Salih İş Merkezi Kat:5 D:20 Çorlu / TEKİRDAĞ"}

list(addresses.items())

df = pd.DataFrame(list(addresses.items()), columns=['city', 'address'])

df

"""## Geocoding the office addresses using ARCGIS API."""

from tqdm.notebook import tqdm

locations = []

for index, row in tqdm(df.iterrows()):
  try:
    location = geocode(row['address'], provider='arcgis', timeout=10)
    locations.append(location)
  except Exception as e:
    print(f"Error processing {row['Full_Address']}: {e}")
    continue

locations

geocoded_df = pd.DataFrame()

geocoded_df['Longitude'] = [loc.geometry.x if loc is not None else np.nan for loc in locations]
geocoded_df['Latitude'] = [loc.geometry.y if loc is not None else np.nan for loc in locations]
geocoded_df['Formatted_Address'] = [loc.address if loc is not None else np.nan for loc in locations]

geocoded_df

"""## Preprocessing the obtained results"""

def preprocess(df):
  # Remove leading "0 " if it exists in the address column
  df['Formatted_Address'] = df['Formatted_Address'].astype(str).str.lstrip('0 ')
  df['Longitude'] = df['Longitude'].astype(str).str.extract(r'(-?\d+\.\d+)').astype(float)
  df['Latitude'] = df['Latitude'].astype(str).str.extract(r'(-?\d+\.\d+)').astype(float)
  df['Longitude'] = pd.to_numeric(df['Longitude'], errors='coerce')
  df['Latitude'] = pd.to_numeric(df['Latitude'], errors='coerce')
  return df

geocoded_df = preprocess(geocoded_df)

geocoded_df

geocoded_df['Address'] = df['address']
geocoded_df['city'] = df['city']

geocoded_df

geocoded_df.columns

columns_order = ['city','Latitude', 'Longitude', 'Address', 'Formatted_Address']

# Select columns in the new order
geocoded_df_new = geocoded_df[columns_order]

geocoded_df_new

geocoded_df_new.to_csv("/content/drive/MyDrive/Repzone/office_locations.csv", index=False)

"""## Plotting the customers and offices on the folium map."""

customers_df = pd.read_csv("/content/drive/MyDrive/Repzone/customers_with_region_and_priority_V2.csv")

# Sample data for representatives (latitude, longitude)
representatives = geocoded_df

# Sample data for customers (latitude, longitude)
customers = customers_df

map_center = (representatives.iloc[0]['Latitude'], representatives.iloc[0]['Longitude'])
m = folium.Map(location=map_center, zoom_start=14)

# Create layer groups
rep_layer = folium.FeatureGroup(name='Repzone offices')
customer_layer = folium.FeatureGroup(name='Customers')

# Add representatives to the map (using blue markers)
for _, row in representatives.iterrows():
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"{row['Address']} (Rep)",
        icon=folium.Icon(color='blue', icon='home')
    ).add_to(rep_layer)

# Add customers to the map (using red markers)
for _, row in customers.iterrows():
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"{row['City']} {row['CustomerId']}",
        icon=folium.Icon(color='red', icon='user')
    ).add_to(customer_layer)


# Add both layers to the map
rep_layer.add_to(m)
customer_layer.add_to(m)

# Add a layer control so users can toggle layers
folium.LayerControl(collapsed=False).add_to(m)

# Save the map to an HTML file
m.save('representatives_customers_map.html')

# Display the map (if you're in a Jupyter notebook, this will show it inline)
m